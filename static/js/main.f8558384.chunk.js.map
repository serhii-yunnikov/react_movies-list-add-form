{"version":3,"sources":["types/Input.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["Input","MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","type","htmlFor","classNames","placeholder","event","onBlur","NewMovie","onAdd","count","setCount","titleValue","setTitleValue","descriptionValue","setDescriptionValue","imgUrlValue","setImgUrlValue","imdbUrlValue","setImdbUrlValue","imdbIdValue","setImdbIdValue","onChangeInput","target","newMovie","clearForm","current","isAble","onSubmit","disabled","App","moviesFromServer","newMoviesAdded","setNewMoviesAdded","clearFunction","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8558384.chunk.js","sourcesContent":["export enum Input {\n  title = 'title',\n  description = 'description',\n  imgUrl = 'imgUrl',\n  imdbUrl = 'imdbUrl',\n  imdbId = 'imdbId',\n}\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Input } from '../../types/Input';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n\n  const hasError = touched && required && !value;\n\n  const type = (name === Input.imdbUrl || name === Input.imgUrl)\n    ? 'url'\n    : 'text';\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type={type}\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable default-case */\nimport { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { Input } from '../../types/Input';\n\ntype Props = {\n  onAdd: (\n    newMovie: Movie,\n    event: React.FormEvent,\n    clearFunction: CallableFunction,\n  ) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [titleValue, setTitleValue] = useState('');\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [imgUrlValue, setImgUrlValue] = useState('');\n  const [imdbUrlValue, setImdbUrlValue] = useState('');\n  const [imdbIdValue, setImdbIdValue] = useState('');\n\n  const onChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, name } = event.target;\n\n    switch (name) {\n      case Input.title:\n        setTitleValue(value);\n        break;\n      case Input.description:\n        setDescriptionValue(value);\n        break;\n      case Input.imgUrl:\n        setImgUrlValue(value);\n        break;\n      case Input.imdbUrl:\n        setImdbUrlValue(value);\n        break;\n      case Input.imdbId:\n        setImdbIdValue(value);\n    }\n  };\n\n  const newMovie = {\n    title: titleValue,\n    description: descriptionValue,\n    imgUrl: imgUrlValue,\n    imdbUrl: imdbUrlValue,\n    imdbId: imdbIdValue,\n  };\n\n  const clearForm = () => {\n    setTitleValue('');\n    setDescriptionValue('');\n    setImgUrlValue('');\n    setImdbUrlValue('');\n    setImdbIdValue('');\n    setCount(current => current + 1);\n  };\n\n  const isAble\n  = !titleValue\n  || !imgUrlValue\n  || !imdbUrlValue\n  || !imdbIdValue;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => onAdd(newMovie, event, clearForm)}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={titleValue}\n        onChange={onChangeInput}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={descriptionValue}\n        onChange={onChangeInput}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrlValue}\n        onChange={onChangeInput}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrlValue}\n        onChange={onChangeInput}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbIdValue}\n        onChange={onChangeInput}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isAble}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport React, { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [newMoviesAdded, setNewMoviesAdded] = useState([...moviesFromServer]);\n\n  const addMovie = (\n    newMovie: Movie,\n    event: React.FormEvent<Element>,\n    clearFunction: CallableFunction,\n  ) => {\n    setNewMoviesAdded(current => [\n      ...current,\n      newMovie,\n    ]);\n\n    event.preventDefault();\n    clearFunction();\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={newMoviesAdded} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}